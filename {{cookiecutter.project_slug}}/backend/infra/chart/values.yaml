affinity: {}

args: null
command: null

db:
  username: ''
  password: ''
  db: ''
  host: ''
  url: null

envPrefix: '{{ cookiecutter.env_prefix }}'
extraEnvVars:
- name: {{ cookiecutter.env_prefix }}PROJECT_NAME
  value: "{{ cookiecutter.project_name }}"

extraEnvVarsCM: null

extraEnvVarsSecret: 'dbsecrets'

fullnameOverride: ''
image:
  registry: docker.io
  repository: {{ cookiecutter.docker_image_service }}
  tag: 0.0.1
  ## Specify a imagePullPolicy
  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
  ## Ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  pullPolicy: IfNotPresent
imagePullSecrets: []
ingress:
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  enabled: false
  hosts:
    - host: chart-example.local
      paths: []
  tls: []

livenessProbe:
  enabled: false
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 1
  failureThreshold: 3
  successThreshold: 1

nameOverride: ''
nodeSelector: {}
podSecurityContext: {}
  # fsGroup: 2000

postgresql:
  enabled: false

readinessProbe:
  enabled: false
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 1
  failureThreshold: 3
  successThreshold: 1

replicaCount: 1
resources: {}
securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  port: {{ cookiecutter.service_port }}
  type: ClusterIP

serviceAccount:
  annotations: {}
  create: true
    # Specifies whether a service account should be created

  name: null
      # The name of the service account to use.

tolerations: []
